import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

/**
 * <p>
 * TODO
 * </p>
 *
 * @author: zhangjunqiang
 * @className: ExcelUtil
 * @description: excel操作相关工具类
 * @date Created in 2020/5/26 14:38
 * @copyright: Copyright (c) 2020
 * @version: V1.0
 * @modified: zhangjunqiang
 */
public class ExcelUtil {

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 获取前端上传的excel文件工作簿
     * @param: MultipartFile file
     * @return: Workbook
     * @throws:
     * @date Created in 2020/5/26 15:54
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    public static Workbook getWorkBook(MultipartFile file) {
        String fileName = file.getOriginalFilename();
        Workbook workbook = null;
        String suffix = fileName.substring(fileName.lastIndexOf("."),fileName.length());
        if (".xls".equals(suffix)) {
            try {
                workbook = new HSSFWorkbook(file.getInputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else if (".xlsx".equals(suffix)) {
            try {
                workbook = new XSSFWorkbook(file.getInputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return workbook;
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 读取指定工作簿中的指定sheet表的指定行数数据
     * @param: Workbook wb,int sheetIndex, int startReadLine, int tailLine
     * @return: void
     * @throws:
     * @date Created in 2020/5/26 15:55
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    public static void readExcel(Workbook wb,int sheetIndex, int startReadLine, int tailLine) {
        Sheet sheet = wb.getSheetAt(sheetIndex);
        Row row = null;
        for(int i=startReadLine; i<sheet.getLastRowNum()-tailLine+1; i++) {
            row = sheet.getRow(i);
            for(Cell c : row) {
                boolean isMerge = isMergedRegion(sheet, i, c.getColumnIndex());
                //判断是否具有合并单元格
                if(isMerge) {
                    String rs = getMergedRegionValue(sheet, row.getRowNum(), c.getColumnIndex());
                    System.out.print(rs + " ");
                }else {
                    System.out.print(c.getRichStringCellValue()+" ");
                }
            }
            System.out.println();
        }
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 获取合并单元格中的数据
     * @param: Sheet sheet ,int row , int column
     * @return: String
     * @throws:
     * @date Created in 2020/5/26 15:57
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    public static String getMergedRegionValue(Sheet sheet ,int row , int column){
        int sheetMergeCount = sheet.getNumMergedRegions();

        for(int i = 0 ; i < sheetMergeCount ; i++){
            CellRangeAddress ca = sheet.getMergedRegion(i);
            int firstColumn = ca.getFirstColumn();
            int lastColumn = ca.getLastColumn();
            int firstRow = ca.getFirstRow();
            int lastRow = ca.getLastRow();

            if(row >= firstRow && row <= lastRow){

                if(column >= firstColumn && column <= lastColumn){
                    Row fRow = sheet.getRow(firstRow);
                    Cell fCell = fRow.getCell(firstColumn);
                    return getCellValue(fCell) ;
                }
            }
        }
        return null ;
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 判断是否合并了行
     * @param: Sheet sheet,int row ,int column
     * @return: boolean
     * @throws:
     * @date Created in 2020/5/26 15:58
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    private static boolean isMergedRow(Sheet sheet,int row ,int column) {
        int sheetMergeCount = sheet.getNumMergedRegions();
        for (int i = 0; i < sheetMergeCount; i++) {
            CellRangeAddress range = sheet.getMergedRegion(i);
            int firstColumn = range.getFirstColumn();
            int lastColumn = range.getLastColumn();
            int firstRow = range.getFirstRow();
            int lastRow = range.getLastRow();
            if(row == firstRow && row == lastRow){
                if(column >= firstColumn && column <= lastColumn){
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 判断是否合并了单元格
     * @param: Sheet sheet,int row ,int column
     * @return: boolean
     * @throws:
     * @date Created in 2020/5/26 15:59
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    private static boolean isMergedRegion(Sheet sheet,int row ,int column) {
        int sheetMergeCount = sheet.getNumMergedRegions();
        for (int i = 0; i < sheetMergeCount; i++) {
            CellRangeAddress range = sheet.getMergedRegion(i);
            int firstColumn = range.getFirstColumn();
            int lastColumn = range.getLastColumn();
            int firstRow = range.getFirstRow();
            int lastRow = range.getLastRow();
            if(row >= firstRow && row <= lastRow){
                if(column >= firstColumn && column <= lastColumn){
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 获取单元格数据
     * @param: Cell cell
     * @return: String
     * @throws:
     * @date Created in 2020/5/26 15:59
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    public static String getCellValue(Cell cell){
        if(cell == null) return "";
        if(cell.getCellType() == Cell.CELL_TYPE_STRING){
            return cell.getStringCellValue();
        }else if(cell.getCellType() == Cell.CELL_TYPE_BOOLEAN){
            return String.valueOf(cell.getBooleanCellValue());
        }else if(cell.getCellType() == Cell.CELL_TYPE_FORMULA){
            return cell.getCellFormula() ;
        }else if(cell.getCellType() == Cell.CELL_TYPE_NUMERIC){
            return String.valueOf(cell.getNumericCellValue());
        }
        return "";
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 合并单元格
     * @param: Sheet sheet, int firstRow, int lastRow, int firstCol, int lastCol
     * @return: void
     * @throws:
     * @date Created in 2020/5/26 16:00
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    private static void mergeRegion(Sheet sheet, int firstRow, int lastRow, int firstCol, int lastCol) {
        sheet.addMergedRegion(new CellRangeAddress(firstRow, lastRow, firstCol, lastCol));
    }

    /**
     * <p>
     * TODO
     * </p>
     *
     * @author: zhangjunqiang
     * @className: ExcelUtil
     * @description: 判断某sheet是否存在合并的单元格
     * @param: Sheet sheet
     * @return: boolean
     * @throws:
     * @date Created in 2020/5/26 16:00
     * @copyright: Copyright (c) 2020
     * @version: V1.0
     * @modified: zhangjunqiang
     */
    private static boolean hasMerged(Sheet sheet) {
        return sheet.getNumMergedRegions() > 0 ? true : false;
    }

}
